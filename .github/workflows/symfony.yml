# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Symfony

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  symfony-build-push:
    runs-on: ubuntu-latest
    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - uses: actions/checkout@v4
    - name: Build the Docker image
      uses: docker/build-push-action@v3
      with:
        file: Dockerfile
        push: false
        tags: user/app:latest
        
    - uses: shivammathur/setup-php@2cb9b829437ee246e9b3cac53555a39208ca6d28
      with:
        php-version: '8.1'
    - uses: actions/checkout@v4
    - name: Copy .env.test.local
      run: php -r "file_exists('.env.test.local') || copy('.env.test', '.env.test.local');"
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKERHUB_REPO_NAME }} .
    - name: Docker Compose
      run: docker compose build --no-cache
    - name: Log in to Docker Hub
      run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Create Docker Tag
      run: docker tag ${{ secrets.DOCKERHUB_REPO_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}
    - name: Push to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}
    - name: Telegram Notification
      run: |
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_BOT_CHAT_ID }}&text=Build%20${{ job.status }}%20for%20${{ github.repository }}%20on%20branch%20${{ github.ref }}"
      if: always()
